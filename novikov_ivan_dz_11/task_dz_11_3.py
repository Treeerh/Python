# 3. Создайте собственный класс-исключение, который должен проверять
# содержимое списка на наличие только чисел. Проверить работу исключения
# на реальном примере.
# Запрашивать у пользователя данные и заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
# При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
class Myerror(Exception):
    def __init__(self, message):
        self.message = message

    @staticmethod
    def valid_number(number):
        try:
            if number.isdigit():
                return True
        except ValueError:
            return False

numbers_list = []
while True:
    number = input('Введите число или "stop" для выхода: ')
    if number == 'stop':
        break
    try:
        if Myerror.valid_number(number):
            numbers_list.append(number)
        else:
            raise Myerror("Вы ввели не число!")
    except Myerror as ex:
        print(ex)
        continue
print(numbers_list)

